/*
 * Copyright 2024 LY Corporation
 *
 * LY Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.line.auth.fido.fido2.demo.service;

import com.linecorp.line.auth.fido.fido2.common.server.ServerAuthenticatorAttestationResponse;
import com.linecorp.line.auth.fido.fido2.server.attestation.AttestationVerificationResult;
import com.linecorp.line.auth.fido.fido2.server.exception.FIDO2ServerRuntimeException;
import com.linecorp.line.auth.fido.fido2.server.model.AttestationObject;
import com.linecorp.line.auth.fido.fido2.server.model.AttestationStatementFormatIdentifier;
import com.linecorp.line.auth.fido.fido2.server.service.AttestationService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Base64;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@SpringBootTest
class AttestationServiceTest {

    @Autowired
    private AttestationService attestationService;

    @Mock
    private ServerAuthenticatorAttestationResponse serverAuthenticatorAttestationResponse;

    private final String ClientDataJSON = "eyJvcmlnaW4iOiJodHRwOi8vbmV0b20uaXB0aW1lLm9yZyIsImNoYWxsZW5nZSI6InhrWEFMbElwYWc5MVVWODVNRGduMTU2ZE93Z0JfYThiQVlselJuYlVRUnpqeG9HalhfTmFtVDJBVHFCd01RcGNaRlpVUjhiOUFZX0t2Vkc4bFJIcC1nIiwidHlwZSI6IndlYmF1dGhuLmNyZWF0ZSJ9";

    @Test
    void getAttestationObjectForPacked1() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=85, attestedCredentialData=AttestedCredentialData(aaguid=[50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114], credentialId=[-15, -47, -76, 75, -97, 98, 71, -84, -81, -95, -36, -61, 12, 27, -52, 71, -40, 107, 79, -7, -20, -84, -74, -106, -71, 106, -93, -66, 44, -52, 20, -70], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[92, 121, -16, 87, 68, 36, -36, -63, 115, 36, 38, 64, -62, 0, 53, -31, -37, 27, -89, 97, 60, -117, 117, 65, 37, 98, 94, 104, 38, 36, 32, 28], y=[-72, -98, 118, -103, -58, 16, -16, -103, 43, 19, 37, 43, 34, -29, -99, -108, 77, -41, 117, 76, 58, 67, 76, 99, -55, 6, 99, 20, 75, 18, 25, -36])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 85, 50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114, 0, 32, -15, -47, -76, 75, -97, 98, 71, -84, -81, -95, -36, -61, 12, 27, -52, 71, -40, 107, 79, -7, -20, -84, -74, -106, -71, 106, -93, -66, 44, -52, 20, -70, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, 92, 121, -16, 87, 68, 36, -36, -63, 115, 36, 38, 64, -62, 0, 53, -31, -37, 27, -89, 97, 60, -117, 117, 65, 37, 98, 94, 104, 38, 36, 32, 28, 34, 88, 32, -72, -98, 118, -103, -58, 16, -16, -103, 43, 19, 37, 43, 34, -29, -99, -108, 77, -41, 117, 76, 58, 67, 76, 99, -55, 6, 99, 20, 75, 18, 25, -36])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("BcVV9rFAAlPisVSD9PIN74H_QaV2VDU0ROmy4NdFXrQ");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEgwRgIhAKdwLkczmAX3n6lcjFjdwXvWwSot2oWjbh6TUSiRb5JxAiEAjf8vEPgWpEr4TXbDA6GWjDDSr4dTOzgbjJmB5J1u-gNjeDVjgVkERTCCBEEwggIpoAMCAQICAQEwDQYJKoZIhvcNAQELBQAwgaExGDAWBgNVBAMMD0ZJRE8yIFRFU1QgUk9PVDExMC8GCSqGSIb3DQEJARYiY29uZm9ybWFuY2UtdG9vbHNAZmlkb2FsbGlhbmNlLm9yZzEWMBQGA1UECgwNRklETyBBbGxpYW5jZTEMMAoGA1UECwwDQ1dHMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDAeFw0xODA1MjMxNDM5NDNaFw0yODA1MjAxNDM5NDNaMIHCMSMwIQYDVQQDDBpGSURPMiBCQVRDSCBLRVkgcHJpbWUyNTZ2MTExMC8GCSqGSIb3DQEJARYiY29uZm9ybWFuY2UtdG9vbHNAZmlkb2FsbGlhbmNlLm9yZzEWMBQGA1UECgwNRklETyBBbGxpYW5jZTEiMCAGA1UECwwZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1ZMRIwEAYDVQQHDAlXYWtlZmllbGQwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARPOl5eq2wfvK6X9t9kSZZ2LHvvcgBAKnbG8jD2VW8XqpmbWX_Ev1CKr46e8M0BP1q5vSeRS_CAQ3jLzLEbibVGoywwKjAJBgNVHRMEAjAAMB0GA1UdDgQWBBRWTffA-MZVtqEfbE0Z879B4v0BeTANBgkqhkiG9w0BAQsFAAOCAgEAh92gn_ggiQXRLUHOCaTp1HpcBhsOw8ZwTKJBxwYK8ycQ5_QRXBcMRi8axVexH2HoUDTg_u-DkvH2UYGYjX_RAxgGIh4dPgrKXwVndtMwiI5QnQwXMocKtzyyeuSQv6INwk_QCuJL5LOAyPtNUWMTb_UvCcdYWjtZYFOeYQSK9T_6dtWSp6XAhIT4wf3CBaxyai-YiRn3nfi154vUrqtuDh56eODK7-Iezg9npbucln3XxW_kRhtk2FERSBmBoo7IotPd8NGTATnwUvt16vw6x3mW2a6zZGOOeYCQmeXlfNza7fSff1BdFWR5f4cJ0gFAv297Tf5dGZQvZD3DcyQ9OJeJ3RQQ9inX0Nhxk1-6cm1i2e8h9gTN7otjqYmnGjs3ezhPdax2AdrmckO43YNuchfTPECPTRzP4rQo3QbwGLeEAk_HV-oJmYiBkdhf2F2QLMm7SdeqZ1Jjg1W1vNJT288vj1EGF-_aKXg_bujAaK86_YNPBJaW9Rdw4EnfFUi5bEdkD5ZSpeAHCQzCDn2RzkBjs2rTFe4qRFUWtC-RZ4wFqRx70jXLIw-ArpeetpjtzJSNqQsqPlEvpyMxuV2ZjnruA2_ysP3RDzqNs7R8JVNKiie0RAbG7et43ULZcC7oix8JKYsJ6wDmX8Gyy7vWM-LS9XiZUH37sEvwKJbM-xxoYXV0aERhdGFYpMt7xoRMV5bqnod3n9fF0ilrzXH86GB-37-9iprAgPHoQQAAAFUyatzwDO9G0JOSmNbEqEpyACDx0bRLn2JHrK-h3MMMG8xH2GtP-eystpa5aqO-LMwUuqUBAgMmIAEhWCBcefBXRCTcwXMkJkDCADXh2xunYTyLdUElYl5oJiQgHCJYILiedpnGEPCZKxMlKyLjnZRN13VMOkNMY8kGYxRLEhnc");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.PACKED.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertTrue(attestationVerificationResult.isSuccess());
    }

    @Test
    void getAttestationObjectForPacked2() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=87, attestedCredentialData=AttestedCredentialData(aaguid=[50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114], credentialId=[-6, 13, -88, -54, -119, 43, 46, 112, 116, -88, 69, -51, 98, -3, -76, -119, -9, 110, -60, 93, -110, -95, -103, -64, 19, 125, -10, 52, -61, -48, -57, -34], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[50, 73, 82, -97, -85, 58, -113, -71, -110, 66, 14, 40, 1, -96, -27, -70, -79, 42, -34, -62, -70, 86, 45, 114, -4, -127, 19, -100, -127, -111, -27, -114], y=[52, 8, -10, -123, -100, -112, 58, 53, -30, -106, -10, -119, -45, -70, 39, -90, 37, 82, -30, 95, -87, -35, -97, 87, 91, -79, 88, -76, -76, 71, -68, 27])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 87, 50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114, 0, 32, -6, 13, -88, -54, -119, 43, 46, 112, 116, -88, 69, -51, 98, -3, -76, -119, -9, 110, -60, 93, -110, -95, -103, -64, 19, 125, -10, 52, -61, -48, -57, -34, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, 50, 73, 82, -97, -85, 58, -113, -71, -110, 66, 14, 40, 1, -96, -27, -70, -79, 42, -34, -62, -70, 86, 45, 114, -4, -127, 19, -100, -127, -111, -27, -114, 34, 88, 32, 52, 8, -10, -123, -100, -112, 58, 53, -30, -106, -10, -119, -45, -70, 39, -90, 37, 82, -30, 95, -87, -35, -97, 87, 91, -79, 88, -76, -76, 71, -68, 27])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("cXsl61muzD1AphDaOveCLlg9AwLRQxQaZZlyWauDk3M");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIgKJZfEPKwdKOxWkOwpso2EVM-qit-RYhTUG-lFqsSciECIQCSbKCFUb0bVBh5y8PllTnVJxPvyeqow2H8Vig-HFdr1WN4NWOBWQRFMIIEQTCCAimgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMzE0Mzk0M1oXDTI4MDUyMDE0Mzk0M1owgcIxIzAhBgNVBAMMGkZJRE8yIEJBVENIIEtFWSBwcmltZTI1NnYxMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMSIwIAYDVQQLDBlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE86Xl6rbB-8rpf232RJlnYse-9yAEAqdsbyMPZVbxeqmZtZf8S_UIqvjp7wzQE_Wrm9J5FL8IBDeMvMsRuJtUajLDAqMAkGA1UdEwQCMAAwHQYDVR0OBBYEFFZN98D4xlW2oR9sTRnzv0Hi_QF5MA0GCSqGSIb3DQEBCwUAA4ICAQCH3aCf-CCJBdEtQc4JpOnUelwGGw7DxnBMokHHBgrzJxDn9BFcFwxGLxrFV7EfYehQNOD-74OS8fZRgZiNf9EDGAYiHh0-CspfBWd20zCIjlCdDBcyhwq3PLJ65JC_og3CT9AK4kvks4DI-01RYxNv9S8Jx1haO1lgU55hBIr1P_p21ZKnpcCEhPjB_cIFrHJqL5iJGfed-LXni9Suq24OHnp44Mrv4h7OD2elu5yWfdfFb-RGG2TYURFIGYGijsii093w0ZMBOfBS-3Xq_DrHeZbZrrNkY455gJCZ5eV83Nrt9J9_UF0VZHl_hwnSAUC_b3tN_l0ZlC9kPcNzJD04l4ndFBD2KdfQ2HGTX7pybWLZ7yH2BM3ui2OpiacaOzd7OE91rHYB2uZyQ7jdg25yF9M8QI9NHM_itCjdBvAYt4QCT8dX6gmZiIGR2F_YXZAsybtJ16pnUmODVbW80lPbzy-PUQYX79opeD9u6MBorzr9g08Elpb1F3DgSd8VSLlsR2QPllKl4AcJDMIOfZHOQGOzatMV7ipEVRa0L5FnjAWpHHvSNcsjD4Cul562mO3MlI2pCyo-US-nIzG5XZmOeu4Db_Kw_dEPOo2ztHwlU0qKJ7REBsbt63jdQtlwLuiLHwkpiwnrAOZfwbLLu9Yz4tL1eJlQffuwS_Aolsz7HGhhdXRoRGF0YViky3vGhExXluqeh3ef18XSKWvNcfzoYH7fv72KmsCA8ehBAAAAVzJq3PAM70bQk5KY1sSoSnIAIPoNqMqJKy5wdKhFzWL9tIn3bsRdkqGZwBN99jTD0MfepQECAyYgASFYIDJJUp-rOo-5kkIOKAGg5bqxKt7CulYtcvyBE5yBkeWOIlggNAj2hZyQOjXilvaJ07onpiVS4l-p3Z9XW7FYtLRHvBs");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.PACKED.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertTrue(attestationVerificationResult.isSuccess());
    }

    @Test
    void getAttestationObjectForPacked1_NegativeClientHashIsNotMatch() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=87, attestedCredentialData=AttestedCredentialData(aaguid=[50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114], credentialId=[-6, 13, -88, -54, -119, 43, 46, 112, 116, -88, 69, -51, 98, -3, -76, -119, -9, 110, -60, 93, -110, -95, -103, -64, 19, 125, -10, 52, -61, -48, -57, -34], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[50, 73, 82, -97, -85, 58, -113, -71, -110, 66, 14, 40, 1, -96, -27, -70, -79, 42, -34, -62, -70, 86, 45, 114, -4, -127, 19, -100, -127, -111, -27, -114], y=[52, 8, -10, -123, -100, -112, 58, 53, -30, -106, -10, -119, -45, -70, 39, -90, 37, 82, -30, 95, -87, -35, -97, 87, 91, -79, 88, -76, -76, 71, -68, 27])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 87, 50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114, 0, 32, -6, 13, -88, -54, -119, 43, 46, 112, 116, -88, 69, -51, 98, -3, -76, -119, -9, 110, -60, 93, -110, -95, -103, -64, 19, 125, -10, 52, -61, -48, -57, -34, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, 50, 73, 82, -97, -85, 58, -113, -71, -110, 66, 14, 40, 1, -96, -27, -70, -79, 42, -34, -62, -70, 86, 45, 114, -4, -127, 19, -100, -127, -111, -27, -114, 34, 88, 32, 52, 8, -10, -123, -100, -112, 58, 53, -30, -106, -10, -119, -45, -70, 39, -90, 37, 82, -30, 95, -87, -35, -97, 87, 91, -79, 88, -76, -76, 71, -68, 27])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("cXsl61muzD1AphDaOveCLlg9AwLRQxQaZZlyWauDk5A");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIgKJZfEPKwdKOxWkOwpso2EVM-qit-RYhTUG-lFqsSciECIQCSbKCFUb0bVBh5y8PllTnVJxPvyeqow2H8Vig-HFdr1WN4NWOBWQRFMIIEQTCCAimgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMzE0Mzk0M1oXDTI4MDUyMDE0Mzk0M1owgcIxIzAhBgNVBAMMGkZJRE8yIEJBVENIIEtFWSBwcmltZTI1NnYxMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMSIwIAYDVQQLDBlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE86Xl6rbB-8rpf232RJlnYse-9yAEAqdsbyMPZVbxeqmZtZf8S_UIqvjp7wzQE_Wrm9J5FL8IBDeMvMsRuJtUajLDAqMAkGA1UdEwQCMAAwHQYDVR0OBBYEFFZN98D4xlW2oR9sTRnzv0Hi_QF5MA0GCSqGSIb3DQEBCwUAA4ICAQCH3aCf-CCJBdEtQc4JpOnUelwGGw7DxnBMokHHBgrzJxDn9BFcFwxGLxrFV7EfYehQNOD-74OS8fZRgZiNf9EDGAYiHh0-CspfBWd20zCIjlCdDBcyhwq3PLJ65JC_og3CT9AK4kvks4DI-01RYxNv9S8Jx1haO1lgU55hBIr1P_p21ZKnpcCEhPjB_cIFrHJqL5iJGfed-LXni9Suq24OHnp44Mrv4h7OD2elu5yWfdfFb-RGG2TYURFIGYGijsii093w0ZMBOfBS-3Xq_DrHeZbZrrNkY455gJCZ5eV83Nrt9J9_UF0VZHl_hwnSAUC_b3tN_l0ZlC9kPcNzJD04l4ndFBD2KdfQ2HGTX7pybWLZ7yH2BM3ui2OpiacaOzd7OE91rHYB2uZyQ7jdg25yF9M8QI9NHM_itCjdBvAYt4QCT8dX6gmZiIGR2F_YXZAsybtJ16pnUmODVbW80lPbzy-PUQYX79opeD9u6MBorzr9g08Elpb1F3DgSd8VSLlsR2QPllKl4AcJDMIOfZHOQGOzatMV7ipEVRa0L5FnjAWpHHvSNcsjD4Cul562mO3MlI2pCyo-US-nIzG5XZmOeu4Db_Kw_dEPOo2ztHwlU0qKJ7REBsbt63jdQtlwLuiLHwkpiwnrAOZfwbLLu9Yz4tL1eJlQffuwS_Aolsz7HGhhdXRoRGF0YViky3vGhExXluqeh3ef18XSKWvNcfzoYH7fv72KmsCA8ehBAAAAVzJq3PAM70bQk5KY1sSoSnIAIPoNqMqJKy5wdKhFzWL9tIn3bsRdkqGZwBN99jTD0MfepQECAyYgASFYIDJJUp-rOo-5kkIOKAGg5bqxKt7CulYtcvyBE5yBkeWOIlggNAj2hZyQOjXilvaJ07onpiVS4l-p3Z9XW7FYtLRHvBs");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.PACKED.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertFalse(attestationVerificationResult.isSuccess());
    }

    @Test
    void getAttestationObjectForPacked2_NegativeClientHashIsNotMatch() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=85, attestedCredentialData=AttestedCredentialData(aaguid=[50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114], credentialId=[-15, -47, -76, 75, -97, 98, 71, -84, -81, -95, -36, -61, 12, 27, -52, 71, -40, 107, 79, -7, -20, -84, -74, -106, -71, 106, -93, -66, 44, -52, 20, -70], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[92, 121, -16, 87, 68, 36, -36, -63, 115, 36, 38, 64, -62, 0, 53, -31, -37, 27, -89, 97, 60, -117, 117, 65, 37, 98, 94, 104, 38, 36, 32, 28], y=[-72, -98, 118, -103, -58, 16, -16, -103, 43, 19, 37, 43, 34, -29, -99, -108, 77, -41, 117, 76, 58, 67, 76, 99, -55, 6, 99, 20, 75, 18, 25, -36])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 85, 50, 106, -36, -16, 12, -17, 70, -48, -109, -110, -104, -42, -60, -88, 74, 114, 0, 32, -15, -47, -76, 75, -97, 98, 71, -84, -81, -95, -36, -61, 12, 27, -52, 71, -40, 107, 79, -7, -20, -84, -74, -106, -71, 106, -93, -66, 44, -52, 20, -70, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, 92, 121, -16, 87, 68, 36, -36, -63, 115, 36, 38, 64, -62, 0, 53, -31, -37, 27, -89, 97, 60, -117, 117, 65, 37, 98, 94, 104, 38, 36, 32, 28, 34, 88, 32, -72, -98, 118, -103, -58, 16, -16, -103, 43, 19, 37, 43, 34, -29, -99, -108, 77, -41, 117, 76, 58, 67, 76, 99, -55, 6, 99, 20, 75, 18, 25, -36])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("BcVV9rFAAlPisVSD9PIN74H_QaV2VDU0ROmy4NdFXeQ");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEgwRgIhAKdwLkczmAX3n6lcjFjdwXvWwSot2oWjbh6TUSiRb5JxAiEAjf8vEPgWpEr4TXbDA6GWjDDSr4dTOzgbjJmB5J1u-gNjeDVjgVkERTCCBEEwggIpoAMCAQICAQEwDQYJKoZIhvcNAQELBQAwgaExGDAWBgNVBAMMD0ZJRE8yIFRFU1QgUk9PVDExMC8GCSqGSIb3DQEJARYiY29uZm9ybWFuY2UtdG9vbHNAZmlkb2FsbGlhbmNlLm9yZzEWMBQGA1UECgwNRklETyBBbGxpYW5jZTEMMAoGA1UECwwDQ1dHMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDAeFw0xODA1MjMxNDM5NDNaFw0yODA1MjAxNDM5NDNaMIHCMSMwIQYDVQQDDBpGSURPMiBCQVRDSCBLRVkgcHJpbWUyNTZ2MTExMC8GCSqGSIb3DQEJARYiY29uZm9ybWFuY2UtdG9vbHNAZmlkb2FsbGlhbmNlLm9yZzEWMBQGA1UECgwNRklETyBBbGxpYW5jZTEiMCAGA1UECwwZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1ZMRIwEAYDVQQHDAlXYWtlZmllbGQwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARPOl5eq2wfvK6X9t9kSZZ2LHvvcgBAKnbG8jD2VW8XqpmbWX_Ev1CKr46e8M0BP1q5vSeRS_CAQ3jLzLEbibVGoywwKjAJBgNVHRMEAjAAMB0GA1UdDgQWBBRWTffA-MZVtqEfbE0Z879B4v0BeTANBgkqhkiG9w0BAQsFAAOCAgEAh92gn_ggiQXRLUHOCaTp1HpcBhsOw8ZwTKJBxwYK8ycQ5_QRXBcMRi8axVexH2HoUDTg_u-DkvH2UYGYjX_RAxgGIh4dPgrKXwVndtMwiI5QnQwXMocKtzyyeuSQv6INwk_QCuJL5LOAyPtNUWMTb_UvCcdYWjtZYFOeYQSK9T_6dtWSp6XAhIT4wf3CBaxyai-YiRn3nfi154vUrqtuDh56eODK7-Iezg9npbucln3XxW_kRhtk2FERSBmBoo7IotPd8NGTATnwUvt16vw6x3mW2a6zZGOOeYCQmeXlfNza7fSff1BdFWR5f4cJ0gFAv297Tf5dGZQvZD3DcyQ9OJeJ3RQQ9inX0Nhxk1-6cm1i2e8h9gTN7otjqYmnGjs3ezhPdax2AdrmckO43YNuchfTPECPTRzP4rQo3QbwGLeEAk_HV-oJmYiBkdhf2F2QLMm7SdeqZ1Jjg1W1vNJT288vj1EGF-_aKXg_bujAaK86_YNPBJaW9Rdw4EnfFUi5bEdkD5ZSpeAHCQzCDn2RzkBjs2rTFe4qRFUWtC-RZ4wFqRx70jXLIw-ArpeetpjtzJSNqQsqPlEvpyMxuV2ZjnruA2_ysP3RDzqNs7R8JVNKiie0RAbG7et43ULZcC7oix8JKYsJ6wDmX8Gyy7vWM-LS9XiZUH37sEvwKJbM-xxoYXV0aERhdGFYpMt7xoRMV5bqnod3n9fF0ilrzXH86GB-37-9iprAgPHoQQAAAFUyatzwDO9G0JOSmNbEqEpyACDx0bRLn2JHrK-h3MMMG8xH2GtP-eystpa5aqO-LMwUuqUBAgMmIAEhWCBcefBXRCTcwXMkJkDCADXh2xunYTyLdUElYl5oJiQgHCJYILiedpnGEPCZKxMlKyLjnZRN13VMOkNMY8kGYxRLEhnc");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.PACKED.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertFalse(attestationVerificationResult.isSuccess());
    }

    @Test
    void getAttestationObjectForNONE() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=103, attestedCredentialData=AttestedCredentialData(aaguid=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], credentialId=[119, -3, 102, -27, 88, -103, -38, 4, 96, 59, 75, -15, 90, 55, -45, 47, 26, -80, 46, -60, -76, 118, 30, -112, -61, 0, -12, 57, -66, 32, 91, -4], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[-15, 22, 70, 113, 127, 120, 67, 76, -46, -10, -59, 57, 108, -32, 88, 33, -128, -54, -114, -35, -15, -53, 60, -114, -16, -69, 12, -9, -110, 119, 108, -90], y=[1, 61, -36, 19, -128, -25, -14, -51, 0, 53, 118, 127, -68, -119, -65, -105, -102, 66, -39, 26, -121, -87, 96, -88, -55, -73, 35, 15, -69, 17, 96, 57])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 119, -3, 102, -27, 88, -103, -38, 4, 96, 59, 75, -15, 90, 55, -45, 47, 26, -80, 46, -60, -76, 118, 30, -112, -61, 0, -12, 57, -66, 32, 91, -4, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, -15, 22, 70, 113, 127, 120, 67, 76, -46, -10, -59, 57, 108, -32, 88, 33, -128, -54, -114, -35, -15, -53, 60, -114, -16, -69, 12, -9, -110, 119, 108, -90, 34, 88, 32, 1, 61, -36, 19, -128, -25, -14, -51, 0, 53, 118, 127, -68, -119, -65, -105, -102, 66, -39, 26, -121, -87, 96, -88, -55, -73, 35, 15, -69, 17, 96, 57])";

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YViky3vGhExXluqeh3ef18XSKWvNcfzoYH7fv72KmsCA8ehBAAAAZwAAAAAAAAAAAAAAAAAAAAAAIHf9ZuVYmdoEYDtL8Vo30y8asC7EtHYekMMA9Dm-IFv8pQECAyYgASFYIPEWRnF_eENM0vbFOWzgWCGAyo7d8cs8jvC7DPeSd2ymIlggAT3cE4Dn8s0ANXZ_vIm_l5pC2RqHqWCoybcjD7sRYDk");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.NONE.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
    }

    @Test
    void getAttestationObjectForU2F() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=2, attestedCredentialData=AttestedCredentialData(aaguid=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], credentialId=[-68, -29, 15, 76, 95, -107, -57, -37, -1, -67, 106, 64, -45, -71, 24, 41, -98, 32, 8, -118, -13, -19, -107, 61, 43, 87, 59, 89, 84, -127, -89, 33], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[-52, -118, -92, -22, 43, 7, -76, -44, -33, 16, 43, -104, -93, 113, 8, -114, 87, -65, -98, 56, 72, -43, 36, -128, -67, 51, -87, -24, -119, -39, -89, 49], y=[-71, 8, -81, -7, -92, 6, 35, 127, -35, -90, -59, 60, 46, 37, -21, 93, -71, 49, -79, 108, -100, -35, -7, 125, -64, -93, 27, -29, -69, -37, -34, -22])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -68, -29, 15, 76, 95, -107, -57, -37, -1, -67, 106, 64, -45, -71, 24, 41, -98, 32, 8, -118, -13, -19, -107, 61, 43, 87, 59, 89, 84, -127, -89, 33, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, -52, -118, -92, -22, 43, 7, -76, -44, -33, 16, 43, -104, -93, 113, 8, -114, 87, -65, -98, 56, 72, -43, 36, -128, -67, 51, -87, -24, -119, -39, -89, 49, 34, 88, 32, -71, 8, -81, -7, -92, 6, 35, 127, -35, -90, -59, 60, 46, 37, -21, 93, -71, 49, -79, 108, -100, -35, -7, 125, -64, -93, 27, -29, -69, -37, -34, -22])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("JnzhL1GZzqi07J9txHjG_jlp9YjgKYp0491-ii6oZfU");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRoZmlkby11MmZnYXR0U3RtdKJjc2lnWEcwRQIhALC90EzGl0gYO55R2-ECvb7yXsQNgpneKtu_gpmgVTTLAiB3Jt_jIujSHOG0wKTaQt5iPcucWUlp0wN_5Sf05Yh81WN4NWOBWQQvMIIEKzCCAhOgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDMxNjE0MzUyN1oXDTI4MDMxMzE0MzUyN1owgawxIzAhBgNVBAMMGkZJRE8yIEJBVENIIEtFWSBwcmltZTI1NnYxMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETzpeXqtsH7yul_bfZEmWdix773IAQCp2xvIw9lVvF6qZm1l_xL9Qiq-OnvDNAT9aub0nkUvwgEN4y8yxG4m1RqMsMCowCQYDVR0TBAIwADAdBgNVHQ4EFgQUVk33wPjGVbahH2xNGfO_QeL9AXkwDQYJKoZIhvcNAQEFBQADggIBAI-_jI31FB-8J2XxzBXMuI4Yg-vAtq07ABHJqnQpUmt8lpOzmvJ0COKcwtq_7bpsgSVBJ26zhnyWcm1q8V0ZbxUvN2kH8N7nteIGn-CJOJkHDII-IbiH4-TUQCJjuCB52duUWL0fGVw2R13J6V-K7U5r0OWBzmtmwwiRVTggVbjDpbx2oqGAwzupG3RmBFDX1M92s3tgywnLr-e6NZal5yZdS8VblJGjswDZbdY-Qobo2DCN6vxvn5TVkukAHiArjpBBpAmuQfKa52vqSCYRpTCm57fQUZ1c1n29OsvDw1x9ckyH8j_9Xgk0AG-MlQ9Rdg3hCb7LkSPvC_zYDeS2Cj_yFw6OWahnnIRwO6t4UtLuRAkLrjP1T7nk0zu1whwj7YEwtva45niWWh6rdyg_SZlfsph3o_MZN5DwKaSrUaEO6b-numELH5GWjjiPgfgPKkIof-D40xaKUFBpNJzorQkAZCJWuHvXRpBZWFVh_UhNlGhX0mhz2yFlBrujYa9BgvIkdJ8Keok6qfAn-r5EEFXcSI8vGY7OEF01QKXVpu8-FW0uSxtQ991AcFD6KjvR51l7e61visUgduhZRIq9bYzeCIxnK5Jhm3o_NJE2bOp2NmVwVe4kjuJX87wo3Ba41bXgwIpdiLWyWJhSHPmJI_1ibRTZ5XO92xbPPSnnkXrFaGF1dGhEYXRhWKTLe8aETFeW6p6Hd5_XxdIpa81x_Ohgft-_vYqawIDx6EEAAAACAAAAAAAAAAAAAAAAAAAAAAAgvOMPTF-Vx9v_vWpA07kYKZ4gCIrz7ZU9K1c7WVSBpyGlAQIDJiABIVggzIqk6isHtNTfECuYo3EIjle_njhI1SSAvTOp6InZpzEiWCC5CK_5pAYjf92mxTwuJetduTGxbJzd-X3Aoxvju9ve6g");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.FIDO_U2F.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertTrue(attestationVerificationResult.isSuccess());
    }

    @Test
    void getAttestationObjectForU2F_NegativeClientHashIsNotMatch() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=2, attestedCredentialData=AttestedCredentialData(aaguid=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], credentialId=[-68, -29, 15, 76, 95, -107, -57, -37, -1, -67, 106, 64, -45, -71, 24, 41, -98, 32, 8, -118, -13, -19, -107, 61, 43, 87, 59, 89, 84, -127, -89, 33], credentialPublicKey=ECCKey(algorithm=ES256, curve=P256, x=[-52, -118, -92, -22, 43, 7, -76, -44, -33, 16, 43, -104, -93, 113, 8, -114, 87, -65, -98, 56, 72, -43, 36, -128, -67, 51, -87, -24, -119, -39, -89, 49], y=[-71, 8, -81, -7, -92, 6, 35, 127, -35, -90, -59, 60, 46, 37, -21, 93, -71, 49, -79, 108, -100, -35, -7, 125, -64, -93, 27, -29, -69, -37, -34, -22])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -68, -29, 15, 76, 95, -107, -57, -37, -1, -67, 106, 64, -45, -71, 24, 41, -98, 32, 8, -118, -13, -19, -107, 61, 43, 87, 59, 89, 84, -127, -89, 33, -91, 1, 2, 3, 38, 32, 1, 33, 88, 32, -52, -118, -92, -22, 43, 7, -76, -44, -33, 16, 43, -104, -93, 113, 8, -114, 87, -65, -98, 56, 72, -43, 36, -128, -67, 51, -87, -24, -119, -39, -89, 49, 34, 88, 32, -71, 8, -81, -7, -92, 6, 35, 127, -35, -90, -59, 60, 46, 37, -21, 93, -71, 49, -79, 108, -100, -35, -7, 125, -64, -93, 27, -29, -69, -37, -34, -22])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("JnzhL1GZzqi07J9txHjG_jlp9YjgKYp1214214");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRoZmlkby11MmZnYXR0U3RtdKJjc2lnWEcwRQIhALC90EzGl0gYO55R2-ECvb7yXsQNgpneKtu_gpmgVTTLAiB3Jt_jIujSHOG0wKTaQt5iPcucWUlp0wN_5Sf05Yh81WN4NWOBWQQvMIIEKzCCAhOgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDMxNjE0MzUyN1oXDTI4MDMxMzE0MzUyN1owgawxIzAhBgNVBAMMGkZJRE8yIEJBVENIIEtFWSBwcmltZTI1NnYxMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETzpeXqtsH7yul_bfZEmWdix773IAQCp2xvIw9lVvF6qZm1l_xL9Qiq-OnvDNAT9aub0nkUvwgEN4y8yxG4m1RqMsMCowCQYDVR0TBAIwADAdBgNVHQ4EFgQUVk33wPjGVbahH2xNGfO_QeL9AXkwDQYJKoZIhvcNAQEFBQADggIBAI-_jI31FB-8J2XxzBXMuI4Yg-vAtq07ABHJqnQpUmt8lpOzmvJ0COKcwtq_7bpsgSVBJ26zhnyWcm1q8V0ZbxUvN2kH8N7nteIGn-CJOJkHDII-IbiH4-TUQCJjuCB52duUWL0fGVw2R13J6V-K7U5r0OWBzmtmwwiRVTggVbjDpbx2oqGAwzupG3RmBFDX1M92s3tgywnLr-e6NZal5yZdS8VblJGjswDZbdY-Qobo2DCN6vxvn5TVkukAHiArjpBBpAmuQfKa52vqSCYRpTCm57fQUZ1c1n29OsvDw1x9ckyH8j_9Xgk0AG-MlQ9Rdg3hCb7LkSPvC_zYDeS2Cj_yFw6OWahnnIRwO6t4UtLuRAkLrjP1T7nk0zu1whwj7YEwtva45niWWh6rdyg_SZlfsph3o_MZN5DwKaSrUaEO6b-numELH5GWjjiPgfgPKkIof-D40xaKUFBpNJzorQkAZCJWuHvXRpBZWFVh_UhNlGhX0mhz2yFlBrujYa9BgvIkdJ8Keok6qfAn-r5EEFXcSI8vGY7OEF01QKXVpu8-FW0uSxtQ991AcFD6KjvR51l7e61visUgduhZRIq9bYzeCIxnK5Jhm3o_NJE2bOp2NmVwVe4kjuJX87wo3Ba41bXgwIpdiLWyWJhSHPmJI_1ibRTZ5XO92xbPPSnnkXrFaGF1dGhEYXRhWKTLe8aETFeW6p6Hd5_XxdIpa81x_Ohgft-_vYqawIDx6EEAAAACAAAAAAAAAAAAAAAAAAAAAAAgvOMPTF-Vx9v_vWpA07kYKZ4gCIrz7ZU9K1c7WVSBpyGlAQIDJiABIVggzIqk6isHtNTfECuYo3EIjle_njhI1SSAvTOp6InZpzEiWCC5CK_5pAYjf92mxTwuJetduTGxbJzd-X3Aoxvju9ve6g");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.FIDO_U2F.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertFalse(attestationVerificationResult.isSuccess());
    }

    @Test
    void getAttestationObjectForTPM() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=21, attestedCredentialData=AttestedCredentialData(aaguid=[-89, -42, -39, 58, -118, 13, 17, -24, -102, -108, -90, -49, 113, 7, 47, 115], credentialId=[-79, -113, 120, -29, 48, 20, 96, -61, 81, -72, 78, 20, -117, 117, -26, -4, 95, 85, 88, 45, 42, 101, 56, -28, 36, 106, 19, -95, -124, -109, 58, 94], credentialPublicKey=RSAKey(algorithm=RS256, n=[-77, -49, -117, -81, -108, 74, 103, -2, -91, -46, 123, -54, -110, -117, -43, -111, -82, 11, 118, -91, -69, -31, -117, -119, 117, 52, 66, 11, -84, 37, -54, -64, 47, 30, -68, 13, -82, 97, -99, -52, -98, -44, -1, -105, -28, -50, 50, -52, 40, -9, 33, -81, -48, -63, -86, -108, -40, -54, 87, 21, 43, 1, -14, 110, -120, 126, 31, 61, 10, 74, 78, 60, -39, 80, -121, 77, -102, -81, 10, 9, 97, -94, -86, 108, -27, -44, 103, -65, 99, -8, -23, 44, -46, 51, -44, -52, -119, -94, 92, -67, -21, -28, 0, 85, -19, 45, 94, -126, -115, 95, 116, 65, -69, 8, 16, 70, -57, 12, 122, -127, 58, 8, -1, 2, 33, -25, -34, -74, -71, 40, -8, -24, -78, -89, 52, -3, 50, 56, -90, 77, -96, -25, 58, -4, -107, 32, -115, -32, 100, 112, -75, -62, 23, -24, -54, 118, 97, -69, -43, 29, -50, -115, 63, 73, 28, -43, -100, 6, -58, -69, -36, -67, -46, -12, -74, -104, -11, -91, 127, 107, -120, -125, 24, -26, -122, 78, -99, -108, -9, 68, -1, -115, 70, 20, 117, 0, 99, -16, -91, -19, 75, 112, 22, 51, -68, 125, 7, 96, 64, -67, -124, -110, 54, -34, -109, -109, 84, 117, -38, 16, 23, 36, 24, -109, -11, -76, -107, -108, -4, -1, -9, 22, 84, -55, 75, -96, -98, 45, -85, 66, -87, 70, -66, 106, -8, 18, 33, 12, 15, 83, -67, 122, -71, 40, 84, -89], e=[1, 0, 1])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, 21, -89, -42, -39, 58, -118, 13, 17, -24, -102, -108, -90, -49, 113, 7, 47, 115, 0, 32, -79, -113, 120, -29, 48, 20, 96, -61, 81, -72, 78, 20, -117, 117, -26, -4, 95, 85, 88, 45, 42, 101, 56, -28, 36, 106, 19, -95, -124, -109, 58, 94, -92, 1, 3, 3, 57, 1, 0, 32, 89, 1, 0, -77, -49, -117, -81, -108, 74, 103, -2, -91, -46, 123, -54, -110, -117, -43, -111, -82, 11, 118, -91, -69, -31, -117, -119, 117, 52, 66, 11, -84, 37, -54, -64, 47, 30, -68, 13, -82, 97, -99, -52, -98, -44, -1, -105, -28, -50, 50, -52, 40, -9, 33, -81, -48, -63, -86, -108, -40, -54, 87, 21, 43, 1, -14, 110, -120, 126, 31, 61, 10, 74, 78, 60, -39, 80, -121, 77, -102, -81, 10, 9, 97, -94, -86, 108, -27, -44, 103, -65, 99, -8, -23, 44, -46, 51, -44, -52, -119, -94, 92, -67, -21, -28, 0, 85, -19, 45, 94, -126, -115, 95, 116, 65, -69, 8, 16, 70, -57, 12, 122, -127, 58, 8, -1, 2, 33, -25, -34, -74, -71, 40, -8, -24, -78, -89, 52, -3, 50, 56, -90, 77, -96, -25, 58, -4, -107, 32, -115, -32, 100, 112, -75, -62, 23, -24, -54, 118, 97, -69, -43, 29, -50, -115, 63, 73, 28, -43, -100, 6, -58, -69, -36, -67, -46, -12, -74, -104, -11, -91, 127, 107, -120, -125, 24, -26, -122, 78, -99, -108, -9, 68, -1, -115, 70, 20, 117, 0, 99, -16, -91, -19, 75, 112, 22, 51, -68, 125, 7, 96, 64, -67, -124, -110, 54, -34, -109, -109, 84, 117, -38, 16, 23, 36, 24, -109, -11, -76, -107, -108, -4, -1, -9, 22, 84, -55, 75, -96, -98, 45, -85, 66, -87, 70, -66, 106, -8, 18, 33, 12, 15, 83, -67, 122, -71, 40, 84, -89, 33, 67, 1, 0, 1])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("W8NSPDBpn5dcVS7ZGHowPoUetDjlu3B_oKtns2YrDL4");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("o2NmbXRjdHBtZ2F0dFN0bXSmY2FsZzkBAGNzaWdZAQBOhN7rK6LRvAkZu8O1Jzbyc3DK_1CMZJkzuLX7Y3J2Ljri44_WbkYRYnBgdr3DChANH-SoXGZ9Ex81UWjfxTojmxDHym9elB3uOqc4Gx6yJPEYr15nrciP-zzudPy5WD_W-zfK4WWY41fsu3xmZRaEGscUrkAczT4Ei7QXNFL7JrChNN7xSN9M2ebQnrU_GinPaavc_LNvekQc2ArH-5v4QF9G87PMxxCamgWne0rR7aAk1yMVUGUFboghMOUGNZSDVgnsnsCxOUJ-i-rnvlHPG772oeoC75BVPkumm4ePX_6kenS0bTWRfGrtgheovBWNeiLdkIF80X7IpCeAH7iNY3ZlcmMyLjBjeDVjglkFDTCCBQkwggPxoAMCAQICDwRADxmzb-0HEp-gnXqKmjANBgkqhkiG9w0BAQsFADBBMT8wPQYDVQQDEzZOQ1UtTlRDLUtFWUlELUZGOTkwMzM4RTE4NzA3OUE2Q0Q2QTAzQURDNTcyMzc0NDVGNkE0OUEwHhcNMTgwMjAxMDAwMDAwWhcNMjUwMTMxMjM1OTU5WjAAMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw9I4HgKwLA9Lxc3stAobT0eWbH08opPkFzrWLnRW7cN-I_0ySyDmIRe-dy7w5jNR4sZnsAfdb95Sfi2P4Heics0oZJdTf_CELsBC_y_EcucMb1PXz0nIj03IJSBb4yzFbJc7yMbk4rCAp97fKY8oT6Q4qzTWEOFPgvQTK4t4GiVtEB_6GwXVmeIKmgQCFxTWlJ-XaWmmePppgPv15Hk98zIBRjcSCtVhKSLDfuGGLMMMzVcLhtbBLuzJFDX-rjSRADiVyZASY2hKt7-sPHj_eMDy1QG2ASumsfYYOULekHyW2w-rLBrh_0Szh_hzxS1BXMlZ2xV28s46FcOLXVoyYQIDAQABo4ICPTCCAjkwDgYDVR0PAQH_BAQDAgeAMAwGA1UdEwEB_wQCMAAwewYDVR0gAQH_BHEwbzBtBgkrBgEEAYI3FR8wYDBeBggrBgEFBQcCAjBSHlAARgBBAEsARQAgAEYASQBEAE8AIABUAEMAUABBACAAVAByAHUAcwB0AGUAZAAgAFAAbABhAHQAZgBvAHIAbQAgAEkAZABlAG4AdABpAHQAeTAQBgNVHSUECTAHBgVngQUIAzBKBgNVHREBAf8EQDA-pDwwOjE4MA4GBWeBBQIDDAVpZDoxMzAQBgVngQUCAgwHTlBDVDZ4eDAUBgVngQUCAQwLaWQ6RkZGRkYxRDAwHwYDVR0jBBgwFoAUdOhwbuNi8U8_KoCvb3uGHTvHco0wHQYDVR0OBBYEFCYgka_wfZtwbNcNAy42SZ8NttP-MIGBBggrBgEFBQcBAQR1MHMwcQYIKwYBBQUHMAKGZWh0dHBzOi8vcGtpLmNlcnRpbmZyYS5maWRvYWxsaWFuY2Uub3JnL3RwbS9OQ1UtTlRDLUtFWUlELUZGOTkwMzM4RTE4NzA3OUE2Q0Q2QTAzQURDNTcyMzc0NDVGNkE0OUEuY3J0MHoGA1UdHwRzMHEwb6BtoGuGaWh0dHBzOi8vcGtpLmNlcnRpbmZyYS5maWRvYWxsaWFuY2Uub3JnL3RwbS9jcmwvTkNVLU5UQy1LRVlJRC1GRjk5MDMzOEUxODcwNzlBNkNENkEwM0FEQzU3MjM3NDQ1RjZBNDlBLmNybDANBgkqhkiG9w0BAQsFAAOCAQEAjm7Cb7p2Ac2bMSqHOQDYQ4LYqfkKTgSyMvHs6p5aKyjsH71Sdmxyv_43zHHNkjRV_qTpxPQR2Vs2z-3XJ-zFQnNNYjYOYrmQWNrZP7kG6FdFi2xiOsXFDDF2EGZfDpelCIn1rfvwKGVi4-5jslKDaiTDjyiPW6kjjdzVWsVDJdfZqrHntb6UBo08baSn4zIoeuzp_arnRBV7khXTy1fjzfGTv_OozQxcpIMdO2q3mHfmdWjF4333oxCsUieJrlZxSvQZpRyO-iuVq2pj1drMZ7UfzSq3cUvnHtwdbh68ILMz6GYRKsM0t18BxlJ83U9X16hbGlSoiSGP4Fm-NvTmeVkGFzCCBhMwggP7oAMCAQICDwTDZT9__rrXaEADze-h2jANBgkqhkiG9w0BAQsFADCBvzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1ZMRIwEAYDVQQHDAlXYWtlZmllbGQxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxDDAKBgNVBAsMA0NXRzE2MDQGA1UEAwwtRklETyBGYWtlIFRQTSBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDE4MTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMB4XDTE3MDIwMTAwMDAwMFoXDTM1MDEzMTIzNTk1OVowQTE_MD0GA1UEAxM2TkNVLU5UQy1LRVlJRC1GRjk5MDMzOEUxODcwNzlBNkNENkEwM0FEQzU3MjM3NDQ1RjZBNDlBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1z5zfRGlB378sKiIsltfPe3--pyI4ii_CN7Pv38O1WCLwb0-H608v6ULS54UYExI9wp39EN1IV7ZAJhB317QO2IXGtr65YZrSiUjWEcjtsrYbM0BlJMoRvCCql_y9cxD7tI9qODo9_FI4sf82PbJ3q2Q2RRJ2Ua1Z9jxcYHef6r76e3dQd1RBYS2BShN7lpsFewbsxBK5M2hp3e_q-T60t3RbjiK8zqlsWoVQdyHHyYYsCkKmOVVet9E5oKhz0T3WEb0H5Y296QnR0zqQnrnwfLvKxxDol2ogSiViiMK1ZpY2bBx-_744TUDH_hRvbiCXeGkH0Q5wELOlvhQWYthQQIDAQABo4IBhzCCAYMwCwYDVR0PBAQDAgGGMBYGA1UdIAQPMA0wCwYJKwYBBAGCNxUfMBsGA1UdJQQUMBIGCSsGAQQBgjcVJAYFZ4EFCAMwEgYDVR0TAQH_BAgwBgEB_wIBADAdBgNVHQ4EFgQUdOhwbuNi8U8_KoCvb3uGHTvHco0wHwYDVR0jBBgwFoAUQxEWmZrunVA3wk_-4lsVyQkzPzIwcQYDVR0fBGowaDBmoGSgYoZgaHR0cHM6Ly9wa2kuY2VydGluZnJhLmZpZG9hbGxpYW5jZS5vcmcvdHBtL2NybC9GSURPIEZha2UgVFBNIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTguY3JsMHgGCCsGAQUFBwEBBGwwajBoBggrBgEFBQcwAoZcaHR0cHM6Ly9wa2kuY2VydGluZnJhLmZpZG9hbGxpYW5jZS5vcmcvdHBtL0ZJRE8gRmFrZSBUUE0gUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxOC5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ04YUo8twkTYi3SxuPj1A6byIkTKuBZgWaVaxAsD8kIapnLVZt2cRnWGBGvdAZO-mQZYtNY67mrN38in1rFuDEbIogCaMo4-0Xsb2MByG9Rrjl84IGFILwA1BzP0dtN4w9sbZWMinfSP5GLyZUY4lEoTO14LTuPGlQr7kYU4nKMdrktwocWnTHRRJV09KXE5eTbrwZQVhBbXaCauewGGHcFn6y8rnQIMTGGVuUCML7sSmXrfpV8BygXmzZYI1abJK0gj9VHXVZosXa14dBRL0OY-fhkf76-0rpqqqyuCbwBeCKUpbjkcyACtZx_SocxdxLVnBZ4YQ-JruGYG8E2O4YtZgR_6Y4laPLL3CFkiEIyPZpkua968QJ4K4V49Lq7GULet1D8F_exRqlGrIh0iNHfd5XsvTsIVDfXuIhOqn-x4P3OhA0Ly_I-lz0Qrx8e_-XlC5VRc29V6Q3NlPvzg2d0nGgQ8VIudGwqBrAph95tFiPTSuXUSwuMi7EnMc3wzLOsDosRDTO6dNp-BaRLHLAqAkVAQlq1FlV00LDlF6K_yIThWg7b9dxGoH2Ivz4N7SJG4HIDMg-ePP9dLWPRkgoK3pMc3ZZOfa10JF9IwDpipwIdhr_7LuYA6fNTqsvzPgVO63HlqcHfxWroKTLO2fOT_FuxYzmk3tQv9uqpBXc7Z3B1YkFyZWFZATYAAQALAAYEcgAgnf_L82w4OuaZ-5ho3G3LidcVOIS-KAOSLBJBWL-tIq4AEAAQCAAAAAAAAQCzz4uvlEpn_qXSe8qSi9WRrgt2pbvhi4l1NEILrCXKwC8evA2uYZ3MntT_l-TOMswo9yGv0MGqlNjKVxUrAfJuiH4fPQpKTjzZUIdNmq8KCWGiqmzl1Ge_Y_jpLNIz1MyJoly96-QAVe0tXoKNX3RBuwgQRscMeoE6CP8CIefetrko-OiypzT9MjimTaDnOvyVII3gZHC1whfoynZhu9Udzo0_SRzVnAbGu9y90vS2mPWlf2uIgxjmhk6dlPdE_41GFHUAY_Cl7UtwFjO8fQdgQL2Ekjbek5NUddoQFyQYk_W0lZT8__cWVMlLoJ4tq0KpRr5q-BIhDA9TvXq5KFSnaGNlcnRJbmZvWK3_VENHgBcAIgALEeaO1E21Ny4UKW4vhKzHg5h1GIGSHjD8IqBvi3PHlFMAIAk-Etg4Yl4bXxfKXdFjH86nCpaLiJlUBZELRlOlBh2aAAAAAUdwF0hVaXtLxoVgpQFzfvmNNFZV-wAiAAuenrLQuzoLQ83D4vd00d7-FbdwokmavPYwWw9ldSjIDgAiAAsH6ioUVHymwvGFK5-rUPdSeCI-DTQS0xHylNaoFnDqMWhhdXRoRGF0YVkBZ8t7xoRMV5bqnod3n9fF0ilrzXH86GB-37-9iprAgPHoQQAAABWn1tk6ig0R6JqUps9xBy9zACCxj3jjMBRgw1G4ThSLdeb8X1VYLSplOOQkahOhhJM6XqQBAwM5AQAgWQEAs8-Lr5RKZ_6l0nvKkovVka4LdqW74YuJdTRCC6wlysAvHrwNrmGdzJ7U_5fkzjLMKPchr9DBqpTYylcVKwHyboh-Hz0KSk482VCHTZqvCglhoqps5dRnv2P46SzSM9TMiaJcvevkAFXtLV6CjV90QbsIEEbHDHqBOgj_AiHn3ra5KPjosqc0_TI4pk2g5zr8lSCN4GRwtcIX6Mp2YbvVHc6NP0kc1ZwGxrvcvdL0tpj1pX9riIMY5oZOnZT3RP-NRhR1AGPwpe1LcBYzvH0HYEC9hJI23pOTVHXaEBckGJP1tJWU_P_3FlTJS6CeLatCqUa-avgSIQwPU716uShUpyFDAQAB");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);

        //when
        final AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        final AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);
        attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);

        //then
        Assertions.assertEquals(AttestationStatementFormatIdentifier.TPM.getValue(),attestationObject.getFmt().getValue());
        Assertions.assertEquals(expectedAuthData,attestationObject.getAuthData().toString());
        Assertions.assertTrue(attestationVerificationResult.isSuccess());
    }


    @Test
    void getAttestationObjectForAndroidSafetyNetTest() {
        final String expectedAuthData = "AuthenticatorData(rpIdHash=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24], userPresent=true, userVerified=false, atIncluded=true, edIncluded=false, signCount=149, attestedCredentialData=AttestedCredentialData(aaguid=[-56, 124, -35, -105, 86, -63, 73, -72, -98, 36, -53, 54, 54, 84, -13, 80], credentialId=[124, -105, 114, -22, -104, -11, -105, -117, -17, 46, -95, 86, 67, -26, 77, 78, -90, -69, 49, -44, 64, -97, 107, -51, -90, 122, 75, -66, 11, -101, -109, -80], credentialPublicKey=RSAKey(algorithm=RS256, n=[-67, 99, 60, -14, -49, 4, -105, -28, 86, -94, -82, 16, -64, 70, 22, 104, -81, 62, -36, 94, -52, -49, 4, -76, 48, -83, 84, 123, -27, 5, -103, 118, 85, -22, -63, 30, 26, 35, -83, 112, 89, 35, 37, -47, -44, 80, -72, -38, -76, -67, -57, -93, 97, 46, 59, 56, -52, -116, -79, 60, -59, 88, 62, 125, 2, -122, -69, -34, 84, -59, -7, 39, -26, -72, 16, 117, 31, 111, -62, -55, -123, 37, -104, -75, 65, 67, 56, -66, -118, -15, -78, -27, 115, 56, -79, 90, 100, 1, -58, -102, 62, -19, -41, -32, -3, -28, 10, 10, 16, 86, -78, -29, -4, -70, 17, -82, -94, 55, -79, -47, -107, 123, 26, 33, -55, 92, 62, -67, 29, -34, 97, -1, 36, -50, -69, -9, -61, -6, -71, 78, -62, 37, -100, -73, -122, 53, 12, 85, 36, 41, 46, 67, -4, -53, -127, 123, -49, 62, -28, -38, 91, 126, 6, 70, -91, 88, -75, 61, -104, -35, 92, 118, -88, -15, -87, -81, -108, 16, -6, -13, -47, -88, 96, 54, -22, -128, 89, 97, 44, -23, 33, 40, -103, -50, 124, -77, 127, 29, -26, -100, -63, -113, 47, 44, -70, 61, -57, -125, -68, -7, 41, 90, -118, -72, -119, 29, 11, 32, 83, -71, 67, 70, 92, -65, -52, -5, -70, -116, 50, 28, 92, -18, 24, 38, 34, -122, -124, 42, -27, 81, -25, 85, 46, -94, 93, -124, -87, 95, 40, 119, 0, -103, 14, 117, 64, -79], e=[1, 0, 1])), extensions=null, bytes=[-53, 123, -58, -124, 76, 87, -106, -22, -98, -121, 119, -97, -41, -59, -46, 41, 107, -51, 113, -4, -24, 96, 126, -33, -65, -67, -118, -102, -64, -128, -15, -24, 65, 0, 0, 0, -107, -56, 124, -35, -105, 86, -63, 73, -72, -98, 36, -53, 54, 54, 84, -13, 80, 0, 32, 124, -105, 114, -22, -104, -11, -105, -117, -17, 46, -95, 86, 67, -26, 77, 78, -90, -69, 49, -44, 64, -97, 107, -51, -90, 122, 75, -66, 11, -101, -109, -80, -92, 1, 3, 3, 57, 1, 0, 32, 89, 1, 0, -67, 99, 60, -14, -49, 4, -105, -28, 86, -94, -82, 16, -64, 70, 22, 104, -81, 62, -36, 94, -52, -49, 4, -76, 48, -83, 84, 123, -27, 5, -103, 118, 85, -22, -63, 30, 26, 35, -83, 112, 89, 35, 37, -47, -44, 80, -72, -38, -76, -67, -57, -93, 97, 46, 59, 56, -52, -116, -79, 60, -59, 88, 62, 125, 2, -122, -69, -34, 84, -59, -7, 39, -26, -72, 16, 117, 31, 111, -62, -55, -123, 37, -104, -75, 65, 67, 56, -66, -118, -15, -78, -27, 115, 56, -79, 90, 100, 1, -58, -102, 62, -19, -41, -32, -3, -28, 10, 10, 16, 86, -78, -29, -4, -70, 17, -82, -94, 55, -79, -47, -107, 123, 26, 33, -55, 92, 62, -67, 29, -34, 97, -1, 36, -50, -69, -9, -61, -6, -71, 78, -62, 37, -100, -73, -122, 53, 12, 85, 36, 41, 46, 67, -4, -53, -127, 123, -49, 62, -28, -38, 91, 126, 6, 70, -91, 88, -75, 61, -104, -35, 92, 118, -88, -15, -87, -81, -108, 16, -6, -13, -47, -88, 96, 54, -22, -128, 89, 97, 44, -23, 33, 40, -103, -50, 124, -77, 127, 29, -26, -100, -63, -113, 47, 44, -70, 61, -57, -125, -68, -7, 41, 90, -118, -72, -119, 29, 11, 32, 83, -71, 67, 70, 92, -65, -52, -5, -70, -116, 50, 28, 92, -18, 24, 38, 34, -122, -124, 42, -27, 81, -25, 85, 46, -94, 93, -124, -87, 95, 40, 119, 0, -103, 14, 117, 64, -79, 33, 67, 1, 0, 1])";
        final byte[] clientDataHsh = Base64.getUrlDecoder().decode("kpGIEoNjy1vytLHG61KvRbv0A82piKzewPmj_3cBC5c");

        //given
        when(serverAuthenticatorAttestationResponse.getAttestationObject()).thenReturn("");
        when(serverAuthenticatorAttestationResponse.getTransports()).thenReturn(null);
        when(serverAuthenticatorAttestationResponse.getClientDataJSON()).thenReturn(ClientDataJSON);


        //when
        AttestationObject attestationObject = attestationService.getAttestationObject(serverAuthenticatorAttestationResponse);
        AttestationVerificationResult attestationVerificationResult = attestationService.verifyAttestation(clientDataHsh,attestationObject);

        assertThrows(FIDO2ServerRuntimeException.class, () -> {
            attestationService.verifyAttestationCertificate(attestationObject, attestationVerificationResult);
        });
        //then
        //throw new FIDO2ServerRuntimeException(InternalErrorCode.ANDROID_SAFETYNET_ATTESTATION_TIMESTAMP_INVALID);
    }
}
